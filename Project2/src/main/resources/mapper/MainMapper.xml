<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.prj.main.mapper.MainMapper">  

	<!-- 공용 ======================================= -->
	<select id="getCityList">
	SELECT *
	FROM CITY
	</select>
	
	<select id="getDutyList">
	SELECT *
	FROM DUTY
	</select>
	
		<select id="getCareerList">
	SELECT *
	FROM CAREER
	</select>
	
		<select id="getEmpList">
	SELECT *
	FROM EMP
	</select>
	
		<select id="getSkillList">
	SELECT *
	FROM SKILL
	</select>
	
	<!-- 채용정보 ======================================= -->
	<select id="getPost">
		SELECT 
		    P.POST_IDX,
		    P.COMPANY_IDX,
		    P.POST_TITLE,
		    C.COMPANY_NAME,
		    C.COMPANY_EMAIL,
		    C.COMPANY_TEL,
		    D.DUTY_NAME,
		    D.DUTY_ID,
		    CR.CAREER_NAME,
		    ED.EDU_NAME,
		    P.POST_SALARY,
		    P.IMAGE_IDX,
		    EM.EMP_NAME,
		    CT.CITY_NAME,
		    POST_CONTENT,
		    POST_HIT,
		    TO_CHAR(P.POST_DDATE, '""YYYY"년 "MM"월 "DD"일"') POST_DDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"년 "MM"월 "DD"일"') POST_CDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"."MM"."DD""') 	  POST_FDATE
		FROM POST P LEFT JOIN COMPANYS C   ON P.COMPANY_IDX = C.COMPANY_IDX
                    LEFT JOIN REVIEW      R   ON C.COMPANY_IDX = R.COMPANY_IDX
                    LEFT JOIN CAREER     CR ON P.CAREER_ID      = CR.CAREER_ID
                    LEFT JOIN DUTY        D   ON P.DUTY_ID   = D.DUTY_ID
                    LEFT JOIN EDU          ED  ON P.EDU_ID          = ED.EDU_ID
                    LEFT JOIN EMP          EM ON P.EMP_ID          = EM.EMP_ID
                    LEFT JOIN CITY          CT ON P.CITY_ID          = CT.CITY_ID
		 WHERE P.POST_IDX = #{post_idx}
		 GROUP BY	P.POST_IDX,
                     P.COMPANY_IDX,
                     P.POST_TITLE,
                     C.COMPANY_NAME,
                     C.COMPANY_EMAIL,
                     C.COMPANY_TEL,
                     D.DUTY_NAME,
                     CR.CAREER_NAME,
                     ED.EDU_NAME,
                     P.POST_SALARY,
                     EM.EMP_NAME,
                     CT.CITY_NAME,
                     POST_CONTENT,
                     POST_HIT,
                     POST_DDATE,
                     POST_CDATE,
                     POST_FDATE,
                     P.IMAGE_IDX,
                     D.DUTY_ID
	</select>
	<select id="getTotPoint">
	  SELECT (AVG(WC_POINT)+AVG(WLB_POINT)+AVG(CC_POINT)+AVG(PO_POINT)+AVG(EM_POINT))/5 FROM REVIEW R JOIN POST P ON R.COMPANY_IDX = P.COMPANY_IDX
	 WHERE P.POST_IDX = #{post_idx}
	 
	 
	
	</select>
	
  	<select id="getPostList">
	 SELECT 
	    P.POST_IDX,
	    P.COMPANY_IDX,
	    P.POST_TITLE,
	    C.COMPANY_NAME,
	    (SELECT (AVG(WC_POINT) + AVG(WLB_POINT) + AVG(CC_POINT) + AVG(PO_POINT) + AVG(EM_POINT)) / 5 
	       FROM REVIEW) AS TOT_POINT,
	    C.COMPANY_EMAIL,
	    C.COMPANY_TEL,
	    D.DUTY_ID,
	    D.DUTY_NAME,
	    CR.CAREER_NAME,
	    ED.EDU_NAME,
	    P.POST_SALARY,
	    LISTAGG(DISTINCT S.SKILL_NAME, ', ') WITHIN GROUP (ORDER BY S.SKILL_NAME) AS SKILL_NAME,
	    EM.EMP_NAME,
	    CT.CITY_NAME,
	    POST_CONTENT,
	    POST_HIT,
	    TO_CHAR(P.POST_DDATE, 'YYYY"년 "MM"월 "DD"일') AS POST_DDATE,
	    TO_CHAR(P.POST_CDATE, 'YYYY"년 "MM"월 "DD"일') AS POST_CDATE,
	    TO_CHAR(P.POST_CDATE, 'YYYY.MM.DD') AS POST_FDATE
	FROM POST P
	LEFT JOIN COMPANYS C ON P.COMPANY_IDX = C.COMPANY_IDX
	LEFT JOIN REVIEW R ON C.COMPANY_IDX = R.COMPANY_IDX
	LEFT JOIN CAREER CR ON P.CAREER_ID = CR.CAREER_ID
	LEFT JOIN DUTY D ON P.DUTY_ID = D.DUTY_ID
	LEFT JOIN EDU ED ON P.EDU_ID = ED.EDU_ID
	LEFT JOIN EMP EM ON P.EMP_ID = EM.EMP_ID
	LEFT JOIN CITY CT ON P.CITY_ID = CT.CITY_ID
	LEFT JOIN POST_SKILL PS ON P.POST_IDX = PS.POST_IDX
	LEFT JOIN SKILL S ON PS.SKILL_ID = S.SKILL_ID
	WHERE P.POST_DDATE &gt; SYSDATE
	GROUP BY 
	    P.POST_IDX,
	    P.COMPANY_IDX,
	    P.POST_TITLE,
	    C.COMPANY_NAME,
	    C.COMPANY_EMAIL,
	    C.COMPANY_TEL,
	    D.DUTY_ID,
	    D.DUTY_NAME,
	    CR.CAREER_NAME,
	    ED.EDU_NAME,
	    P.POST_SALARY,
	    EM.EMP_NAME,
	    CT.CITY_NAME,
	    POST_CONTENT,
	    POST_HIT,
	    POST_DDATE,
	    POST_CDATE,
	    POST_FDATE
	ORDER BY POST_HIT DESC

  	</select>
 
 	<select id="getCompanyPost">
		SELECT 
		    P.POST_IDX,
		    P.COMPANY_IDX,
		    P.POST_TITLE,
		    C.COMPANY_NAME,
		    (SELECT (AVG(WC_POINT)+AVG(WLB_POINT)+AVG(CC_POINT)+AVG(PO_POINT)+AVG(EM_POINT))/5 FROM REVIEW) TOT_POINT,
		    C.COMPANY_EMAIL,
		    C.COMPANY_TEL,
		    D.DUTY_NAME,
		    CR.CAREER_NAME,
		    ED.EDU_NAME,
		    P.POST_SALARY,
		    S.SKILL_NAME,
		    EM.EMP_NAME,
		    CT.CITY_NAME,
		    POST_CONTENT,
		    POST_HIT,
		    TO_CHAR(P.POST_DDATE, '""YYYY"년 "MM"월 "DD"일"') POST_DDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"년 "MM"월 "DD"일"') POST_CDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"."MM"."DD""') 	  POST_FDATE
		FROM POST P LEFT JOIN COMPANYS   C      ON P.COMPANY_IDX = C.COMPANY_IDX
                    LEFT JOIN REVIEW     R   	ON C.COMPANY_IDX = R.COMPANY_IDX
                    LEFT JOIN CAREER     CR 	ON P.CAREER_ID   = CR.CAREER_ID
                    LEFT JOIN DUTY       D   	ON P.DUTY_ID     = D.DUTY_ID
                    LEFT JOIN EDU        ED  	ON P.EDU_ID      = ED.EDU_ID
                    LEFT JOIN EMP        EM 	ON P.EMP_ID      = EM.EMP_ID
                    LEFT JOIN CITY       CT 	ON P.CITY_ID     = CT.CITY_ID
                    LEFT JOIN POST_SKILL PS  	ON P.POST_IDX 	 = PS.POST_IDX
                    LEFT JOIN SKILL      S      ON PS.SKILL_ID   = S.SKILL_ID
		 WHERE P.COMPANY_IDX = #{company_idx}
		 		 GROUP BY	P.POST_IDX,
                     P.COMPANY_IDX,
                     P.POST_TITLE,
                     C.COMPANY_NAME,
                     C.COMPANY_EMAIL,
                     C.COMPANY_TEL,
                     D.DUTY_NAME,
                     CR.CAREER_NAME,
                     ED.EDU_NAME,
                     P.POST_SALARY,
                     S.SKILL_NAME,
                     EM.EMP_NAME,
                     CT.CITY_NAME,
                     POST_CONTENT,
                     POST_HIT,
                     POST_DDATE,
                     POST_CDATE,
                     POST_FDATE
	</select>
 
 <update id="updatePostHit">
	 	UPDATE POST SET POST_HIT = POST_HIT + 1 WHERE POST_IDX = #{post_idx}
 </update>
 
 
 
  	<select id="getFilteredPosts">
		SELECT 
		    P.POST_IDX,
		    P.COMPANY_IDX,
		    P.POST_TITLE,
		    C.COMPANY_NAME,
		    (SELECT (AVG(WC_POINT)+AVG(WLB_POINT)+AVG(CC_POINT)+AVG(PO_POINT)+AVG(EM_POINT))/5 FROM REVIEW) TOT_POINT,
		    C.COMPANY_EMAIL,
		    C.COMPANY_TEL,
		    D.DUTY_ID,
		    D.DUTY_NAME,
		    CR.CAREER_NAME,
		    ED.EDU_NAME,
		    P.POST_SALARY,
		    LISTAGG(DISTINCT S.SKILL_NAME, ', ') WITHIN GROUP (ORDER BY S.SKILL_NAME) AS SKILL_NAME,
		    EM.EMP_NAME,
		    CT.CITY_NAME,
		    POST_CONTENT,
		    POST_HIT,
		    TO_CHAR(P.POST_DDATE, '""YYYY"년 "MM"월 "DD"일"') POST_DDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"년 "MM"월 "DD"일"') POST_CDATE,
		    TO_CHAR(P.POST_CDATE, '""YYYY"."MM"."DD""') 	  POST_FDATE
		FROM POST P LEFT JOIN COMPANYS C   ON P.COMPANY_IDX = C.COMPANY_IDX
		                   LEFT JOIN REVIEW      R   ON C.COMPANY_IDX = R.COMPANY_IDX
		                   LEFT JOIN CAREER     CR ON P.CAREER_ID      = CR.CAREER_ID
		                   LEFT JOIN DUTY        D   ON P.DUTY_ID   = D.DUTY_ID
		                   LEFT JOIN EDU          ED  ON P.EDU_ID          = ED.EDU_ID
		                   LEFT JOIN EMP          EM ON P.EMP_ID          = EM.EMP_ID
		                   LEFT JOIN CITY          CT ON P.CITY_ID          = CT.CITY_ID
		                   LEFT JOIN POST_SKILL PS  ON P.POST_IDX = PS.POST_IDX
		                   LEFT JOIN SKILL         S   ON PS.SKILL_ID  = S.SKILL_ID
		WHERE P.POST_IDX IN (
        SELECT P.POST_IDX
        FROM POST P
        LEFT JOIN POST_SKILL PS ON P.POST_IDX = PS.POST_IDX
        <if test="skill_id != null and skill_id != ''">
            WHERE PS.SKILL_ID = #{skill_id}
        </if>
                               ) 
	      AND P.POST_DDATE &gt; SYSDATE 
	    <if test="city_id != null and city_id != ''">
	      AND P.city_id = #{city_id}
	    </if>
	    <if test="duty_id != null and duty_id != ''">
	      AND P.duty_id = #{duty_id}
	    </if>
	    <if test="career_id != null and career_id != ''">
	      AND P.career_id = #{career_id}
	    </if>
	    <if test="emp_id != null and emp_id != ''">
	      AND P.emp_id = #{emp_id}
	    </if>
          GROUP BY P.POST_IDX,
                 P.COMPANY_IDX,
                 P.POST_TITLE,
                 C.COMPANY_NAME,
                 C.COMPANY_EMAIL,
                 C.COMPANY_TEL,
                 D.DUTY_ID,
                 D.DUTY_NAME,
                 CR.CAREER_NAME,
                 ED.EDU_NAME,
                 P.POST_SALARY,
                 EM.EMP_NAME,
                 CT.CITY_NAME,
                 POST_CONTENT,
                 POST_HIT,
                 POST_DDATE,
                 POST_CDATE,
                 POST_FDATE
  </select>
  
  
  <!-- 인재정보 ======================================= -->
  <select id="getResume">
	 SELECT
	    R.RESUME_IDX,
	    U.USER_IDX,
	    U.USER_NAME,
	    TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(U.USER_BIRTHDATE,'YYYY-MM-DD')) / 12) USER_AGE,
	    U.USER_GENDER,
	    SUBSTR(U.USER_BIRTHDATE,0,4) USER_YEAR,
	    U.USER_TEL,
	    U.USER_EMAIL,
	    RESUME_TITLE,
	    EB_NAME,
	    ED.EDU_NAME,
	    C.CITY_NAME,
	    D.DUTY_NAME,
	    D.DUTY_ID,
	    E.EMP_NAME,
	    RC.CAREER_CNAME,
	    TO_CHAR(RC.CAREER_SDATE,'YYYY.MM') CAREER_SDATE,
	    TO_CHAR(RC.CAREER_EDATE,'YYYY.MM') CAREER_EDATE,
	    TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE,RC.CAREER_SDATE) / 12, 0) CAREER_YEAR,
	    TRUNC(MOD(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE),12),0) CAREER_MONTH,
	    RC.CAREER_DESCRIPTION,
	    COVER_LETTER,
	    RESUME_HIT,
	    R.IMAGE_IDX,
	    TO_CHAR(RESUME_CDATE,'""YYYY"-"MM"-"DD""') RESUME_CDATE,
	    TO_CHAR(RESUME_FDATE,'""YYYY"-"MM"-"DD""') RESUME_FDATE
	FROM
	    RESUME R LEFT JOIN DUTY D 			ON R.DUTY_ID 	= D.DUTY_ID
	             LEFT JOIN CITY C 			ON R.CITY_ID 	= C.CITY_ID
	             LEFT JOIN EMP E  			ON R.EMP_ID 	= E.EMP_ID
	             LEFT JOIN EDU ED 			ON R.EDU_ID 	= ED.EDU_ID 
                 LEFT JOIN USERS U 		    ON R.USER_IDX 	= U.USER_IDX
                 LEFT JOIN RESUME_CAREER RC ON R.RESUME_IDX = RC.RESUME_IDX
	WHERE R.RESUME_IDX = #{resume_idx}
	</select>

 	<select id="getResumeList">
  SELECT
	    R.RESUME_IDX,
	    U.USER_IDX,
	    U.USER_NAME,
	    TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(U.USER_BIRTHDATE,'YYYY-MM-DD')) / 12) USER_AGE,
	    U.USER_GENDER,
	    SUBSTR(U.USER_BIRTHDATE,0,4) USER_YEAR,
	    U.USER_TEL,
	    U.USER_EMAIL,
	    RESUME_TITLE,
	    EB_NAME,
	    ED.EDU_NAME,
	    C.CITY_NAME,
	    D.DUTY_NAME,
	    E.EMP_NAME,
	    RC.CAREER_CNAME,
	    TO_CHAR(RC.CAREER_SDATE,'YYYY.MM') CAREER_SDATE,
	    TO_CHAR(RC.CAREER_EDATE,'YYYY.MM') CAREER_EDATE,
	    TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE,RC.CAREER_SDATE) / 12, 0) CAREER_YEAR,
	    TRUNC(MOD(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE),12),0) CAREER_MONTH,
	    RC.CAREER_DESCRIPTION,
	    COVER_LETTER,
	    RESUME_HIT,
	    TO_CHAR(RESUME_CDATE,'""YYYY"-"MM"-"DD""') RESUME_CDATE,
	    TO_CHAR(RESUME_FDATE,'""YYYY"-"MM"-"DD""') RESUME_FDATE
	FROM
	    RESUME R LEFT JOIN DUTY D 			ON R.DUTY_ID 	= D.DUTY_ID
	             LEFT JOIN CITY C 			ON R.CITY_ID 	= C.CITY_ID
	             LEFT JOIN EMP E  			ON R.EMP_ID 	= E.EMP_ID
	             LEFT JOIN EDU ED 			ON R.EDU_ID 	= ED.EDU_ID 
                 LEFT JOIN USERS U 		    ON R.USER_IDX 	= U.USER_IDX
                 LEFT JOIN RESUME_CAREER RC ON R.RESUME_IDX = RC.RESUME_IDX
                 
    </select>     
          
	<select id="getUserResume">
	 SELECT
	    R.RESUME_IDX,
	    U.USER_NAME,
	    TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(U.USER_BIRTHDATE,'YYYY-MM-DD')) / 12) USER_AGE,
	    U.USER_GENDER,
	    SUBSTR(U.USER_BIRTHDATE,0,4) USER_YEAR,
	    U.USER_TEL,
	    U.USER_EMAIL,
	    RESUME_TITLE,
	    EB_NAME,
	    ED.EDU_NAME,
	    S.SKILL_NAME,
	    C.CITY_NAME,
	    D.DUTY_NAME,
	    E.EMP_NAME,
	    RC.CAREER_CNAME,
	    TO_CHAR(RC.CAREER_SDATE,'YYYY.MM') CAREER_SDATE,
	    TO_CHAR(RC.CAREER_EDATE,'YYYY.MM') CAREER_EDATE,
	    TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE,RC.CAREER_SDATE) / 12, 0) CAREER_YEAR,
	    TRUNC(MOD(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE),12),0) CAREER_MONTH,
	    RC.CAREER_DESCRIPTION,
	    COVER_LETTER,
	    RESUME_HIT,
	    TO_CHAR(RESUME_CDATE,'""YYYY"-"MM"-"DD""') RESUME_CDATE,
	    TO_CHAR(RESUME_FDATE,'""YYYY"-"MM"-"DD""') RESUME_FDATE
	FROM
	    RESUME R LEFT JOIN DUTY D 			ON R.DUTY_ID 	= D.DUTY_ID
	             LEFT JOIN CITY C 			ON R.CITY_ID 	= C.CITY_ID
	             LEFT JOIN EMP E  			ON R.EMP_ID 	= E.EMP_ID
	             LEFT JOIN EDU ED 			ON R.EDU_ID 	= ED.EDU_ID 
               LEFT JOIN USERS U 		    ON R.USER_IDX 	= U.USER_IDX
               LEFT JOIN RESUME_SKILL RS  ON R.RESUME_IDX = RS.RESUME_IDX
               LEFT JOIN SKILL S          ON RS.SKILL_ID 	= S.SKILL_ID
               LEFT JOIN RESUME_CAREER RC ON R.RESUME_IDX = RC.RESUME_IDX
	WHERE U.USER_IDX = #{user_idx}
	</select>
	
<select id="getFilteredResumes">
  SELECT
    R.RESUME_IDX,
    U.USER_NAME,
    TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(U.USER_BIRTHDATE, 'YYYY-MM-DD')) / 12) AS USER_AGE,
    U.USER_GENDER,
    SUBSTR(U.USER_BIRTHDATE, 0, 4) AS USER_YEAR,
    U.USER_TEL,
    U.USER_EMAIL,
    R.RESUME_TITLE,
    EB_NAME,
    ED.EDU_NAME,
    C.CITY_NAME,
    D.DUTY_NAME,
    E.EMP_NAME,
    LISTAGG( DISTINCT S.SKILL_NAME, ', ') WITHIN GROUP (ORDER BY S.SKILL_NAME) AS SKILL_NAME, 
    RC.CAREER_CNAME,
    TO_CHAR(RC.CAREER_SDATE, 'YYYY.MM') AS CAREER_SDATE,
    TO_CHAR(RC.CAREER_EDATE, 'YYYY.MM') AS CAREER_EDATE,
    TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE) / 12, 0) AS CAREER_YEAR,
    TRUNC(MOD(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE), 12), 0) AS CAREER_MONTH,
    RC.CAREER_DESCRIPTION,
    R.COVER_LETTER,
    R.RESUME_HIT,
    TO_CHAR(R.RESUME_CDATE, 'YYYY-MM-DD') AS RESUME_CDATE,
    TO_CHAR(R.RESUME_FDATE, 'YYYY-MM-DD') AS RESUME_FDATE
  FROM
    RESUME R
    LEFT JOIN DUTY D ON R.DUTY_ID = D.DUTY_ID
    LEFT JOIN CITY C ON R.CITY_ID = C.CITY_ID
    LEFT JOIN EMP E ON R.EMP_ID = E.EMP_ID
    LEFT JOIN EDU ED ON R.EDU_ID = ED.EDU_ID
    LEFT JOIN USERS U ON R.USER_IDX = U.USER_IDX
    LEFT JOIN RESUME_SKILL RS ON R.RESUME_IDX = RS.RESUME_IDX
    LEFT JOIN SKILL S ON RS.SKILL_ID = S.SKILL_ID
    LEFT JOIN RESUME_CAREER RC ON R.RESUME_IDX = RC.RESUME_IDX
  WHERE  R.RESUME_IDX IN (
        SELECT R.RESUME_IDX
        FROM RESUME R
        LEFT JOIN RESUME_SKILL RS ON R.RESUME_IDX = RS.RESUME_IDX
        <if test="skill_id != null and skill_id != ''">
            WHERE RS.SKILL_ID = #{skill_id}
        </if>
    )
    AND U.USER_NAME IS NOT NULL
    <if test="city_id != null and city_id != ''">
      AND R.CITY_ID = #{city_id}
    </if>
    <if test="duty_id != null and duty_id != ''">
      AND R.DUTY_ID = #{duty_id}
    </if>
    <if test="career_id != null and career_id != ''">
      AND TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE) / 12, 0) >= #{career_id}/10
    </if>
    <if test="career_id == 0 and career_id != ''">
      AND TRUNC(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE) / 12, 0) >= #{career_id}/10
    </if>
    <if test="emp_id != null and emp_id != ''">
      AND R.EMP_ID = #{emp_id}
    </if>
  GROUP BY
    R.RESUME_IDX,
    U.USER_NAME,
    U.USER_BIRTHDATE,
    U.USER_GENDER,
    U.USER_TEL,
    U.USER_EMAIL,
    R.RESUME_TITLE,
    EB_NAME,
    ED.EDU_NAME,
    C.CITY_NAME,
    D.DUTY_NAME,
    E.EMP_NAME,
    RC.CAREER_CNAME,
    RC.CAREER_SDATE,
    RC.CAREER_EDATE,
    RC.CAREER_DESCRIPTION,
    R.COVER_LETTER,
    R.RESUME_HIT,
    R.RESUME_CDATE,
    R.RESUME_FDATE
</select>
	
 <update id="updateResumeHit">
	 	UPDATE RESUME SET RESUME_HIT = RESUME_HIT + 1 WHERE RESUME_IDX = #{resume_idx}
 </update>
	
	
	<select id="getCompanyList">
		SELECT 
			C.COMPANY_IDX,
			C.COMPANY_NAME,
			C.COMPANY_AREA,
			COUNT(P.POST_IDX) COUNT
		FROM 
			COMPANYS C LEFT JOIN POST   P  ON C.COMPANY_IDX = P.COMPANY_IDX
		GROUP BY 	 C.COMPANY_IDX,C.COMPANY_NAME,C.COMPANY_AREA
	</select>
	
  <insert id="insetScout">
  	INSERT INTO scout (
    scout_idx,
    user_idx,
    post_idx
) VALUES (
    (SELECT NVL(MAX(SCOUT_IDX)+1,0) FROM SCOUT),
    (SELECT USER_IDX FROM RESUME WHERE RESUME_IDX = #{arg0}),
    #{arg1}
)
  </insert>
	
	
	
	
	
	
	<!-- 지원현황 관련 -->
	<insert id="insertApply">
		INSERT INTO APPLICATION (
    appli_idx,
    resume_idx,
    post_idx

) VALUES (
    (SELECT NVL(MAX(APPLI_IDX)+1,0) FROM APPLICATION),
    #{resume_idx},
    #{post_idx}
)
	</insert>
	
	<insert id="insertReview">
		INSERT INTO review (
    review_idx,
    user_idx,
    company_idx,
    wc_point,
    wlb_point,
    cc_point,
    po_point,
    em_point,
    review_pros,
    review_con,
    review_title
) VALUES (
    (SELECT NVL(MAX(REVIEW_IDX)+1,0) FROM REVIEW),
		#{user_idx},
		 (SELECT COMPANY_IDX FROM COMPANYS
							WHERE COMPANY_NAME = #{company_name}),
		#{wc_point},
		#{wlb_point},
		#{cc_point},
		#{po_point},
		#{em_point},
		#{review_pros},
    #{review_con},
    #{review_title}
)
	</insert>
	
	<select id="getCompanyInfo">
		SELECT 
	    C.COMPANY_IDX,
	    C.COMPANY_NAME,
	    C.COMPANY_TEL,
	    C.COMPANY_EMAIL,
	    C.COMPANY_AREA,
	    C.COMPANY_ADDRESS,
	    C.IMAGE_IDX,
	    C.COMPANY_BIRTHDATE,
	    (AVG(WC_POINT)+AVG(WLB_POINT)+AVG(CC_POINT)+AVG(PO_POINT)+AVG(EM_POINT))/5 TOT_POINT,
	    ROUND(AVG(WC_POINT),1) WC_POINT,
	    ROUND(AVG(WLB_POINT),1) WLB_POINT,
	    ROUND(AVG(CC_POINT),1) CC_POINT,
	    ROUND(AVG(PO_POINT),1) PO_POINT,
	    ROUND(AVG(EM_POINT),1) EM_POINT
		FROM COMPANYS C LEFT JOIN REVIEW R ON C.COMPANY_IDX = R.COMPANY_IDX
		WHERE C.COMPANY_IDX = #{company_idx}
		GROUP BY   C.COMPANY_IDX,C.COMPANY_NAME,C.COMPANY_TEL,C.COMPANY_EMAIL,C.COMPANY_AREA,C.COMPANY_ADDRESS,C.COMPANY_BIRTHDATE, C.IMAGE_IDX
	</select>
	
	<select id="getReviewCount">
		SELECT COUNT(*)
		FROM REVIEW
		WHERE COMPANY_IDX = #{company_idx}
	</select>
	
	<select id = "getUserReview">
		
	SELECT
	    REVIEW_IDX,
	    USER_IDX,
	    COMPANY_IDX,
	    ROUND((AVG(WC_POINT)+AVG(WLB_POINT)+AVG(CC_POINT)+AVG(PO_POINT)+AVG(EM_POINT))/5,1) TOT_POINT,
	    REVIEW_TITLE,
	    REVIEW_PROS,
	    REVIEW_CON,
	    TO_CHAR(REVIEW_DATE,'YYYY-MM-DD') REVIEW_DATE
	FROM
	    REVIEW
			WHERE COMPANY_IDX = #{company_idx}
			GROUP BY  REVIEW_IDX,
	    					USER_IDX,
	    					COMPANY_IDX,
	    					REVIEW_TITLE,
						    REVIEW_PROS,
						    REVIEW_CON,
	    					REVIEW_DATE
	</select>
	
	
	<select id="getMyReview">
	SELECT
	    R.REVIEW_IDX,
	    R.USER_IDX,
	    C.COMPANY_NAME,
	    ROUND(WC_POINT,1) WC_POINT,
	    ROUND(WLB_POINT,1) WLB_POINT, 
	    ROUND(CC_POINT,1) CC_POINT, 
	    ROUND(PO_POINT,1) PO_POINT,
	    ROUND(EM_POINT,1) EM_POINT,
	    REVIEW_TITLE,
	    REVIEW_PROS,
	    REVIEW_CON,
	    TO_CHAR(REVIEW_DATE,'YYYY-MM-DD') REVIEW_DATE
	FROM
	    REVIEW R LEFT JOIN COMPANYS C ON R.COMPANY_IDX = C.COMPANY_IDX
			WHERE USER_IDX = #{user_idx}
	</select>
	
  <select id="countP">
 	SELECT COUNT(POST_IDX)
	FROM POST
	WHERE COMPANY_IDX = #{company_idx}
  
  </select>
	
	<select id="getReviewData">
		SELECT
	    R.REVIEW_IDX,
	    R.USER_IDX,
	    C.COMPANY_NAME,
	    ROUND(WC_POINT,1) WC_POINT,
	    ROUND(WLB_POINT,1) WLB_POINT, 
	    ROUND(CC_POINT,1) CC_POINT, 
	    ROUND(PO_POINT,1) PO_POINT,
	    ROUND(EM_POINT,1) EM_POINT,
	    REVIEW_TITLE,
	    REVIEW_PROS,
	    REVIEW_CON,
	    TO_CHAR(REVIEW_DATE,'YYYY-MM-DD') REVIEW_DATE
	FROM
	    REVIEW R LEFT JOIN COMPANYS C ON R.COMPANY_IDX = C.COMPANY_IDX
			WHERE R.REVIEW_IDX = #{resume_idx}
	</select>
	
	<update id="updateReview">
		UPDATE REVIEW
		SET 	
			WC_POINT 	 = #{wc_point},          
			WLB_POINT 	 = #{wlb_point}, 
			CC_POINT 	 = #{cc_point}, 
			PO_POINT	 = #{po_point},
			EM_POINT 	 = #{em_point},
			REVIEW_TITLE = #{review_title},
		    REVIEW_PROS  = #{review_pros},
		    REVIEW_CON    = #{review_con}
		WHERE REVIEW_IDX = #{review_idx}
	</update>
	
	<delete id="deleteReview">
		DELETE
		FROM   REVIEW
		WHERE  REVIEW_IDX = #{review_idx}
	</delete>
	
	<select  id="getCount">
		SELECT COUNT(*)
		FROM   REVIEW
	</select>
	
   <insert id="bookMarkOn">
   INSERT INTO USER_BOOKMARK (UB_IDX,USER_IDX,COMPANY_IDX)
   VALUES (NVL((SELECT MAX(ub_idx) FROM USER_BOOKMARK), 0) + 1,#{arg0},#{arg1})
   </insert>
   
   <delete id="bookMarkOff">
    DELETE FROM USER_BOOKMARK
    WHERE USER_IDX = #{arg0} AND POST_IDX = #{arg1}
   </delete>



   <!-- HRS북마크 -->

   <insert id="insertBookC">
   INSERT INTO COMPANY_BOOKMARK (CB_IDX ,RESUME_IDX, COMPANY_IDX)
   VALUES (NVL((SELECT MAX(CB_IDX) FROM COMPANY_BOOKMARK), 0) + 1,#{arg1},#{arg0})    
   </insert>

   <delete id="deleteBookC">
   DELETE FROM COMPANY_BOOKMARK
   WHERE COMPANY_IDX =#{arg0} AND RESUME_IDX=#{arg1}   
   </delete>
   
   <select id="getBookC">
   SELECT CB_IDX
   FROM COMPANY_BOOKMARK
   WHERE COMPANY_IDX =#{arg0} AND RESUME_IDX=#{arg1}  
   </select>
   
   <!-- JOBS지원자수 -->
   <select id="getPostCount">
   SELECT 
    COUNT(A.APPLI_IDX) AS total_count,
    COUNT(CASE WHEN U.USER_GENDER = '남' THEN 1 END) AS male_count,
    COUNT(CASE WHEN U.USER_GENDER = '여' THEN 1 END) AS female_count
	FROM 
	    APPLICATION A 
	JOIN 
	    RESUME RE ON A.RESUME_IDX = RE.RESUME_IDX
	JOIN 
	    USERS U ON U.USER_IDX = RE.USER_IDX
	WHERE 
	    A.POST_IDX = #{post_idx} 
   </select>
   
    <!-- JOBS공고추천 -->
   <select id="getPostClickList">
	SELECT P.POST_TITLE, TO_CHAR(P.POST_DDATE, '~MM.DD') AS POST_DDATE,
	CO.COMPANY_NAME, E.EMP_NAME,  SUBSTR(C.CAREER_NAME, 1, 2)AS CAREER_NAME, D.DUTY_NAME, P.POST_IDX
	FROM POST P JOIN COMPANYS CO ON CO.COMPANY_IDX =P.COMPANY_IDX
	            JOIN DUTY D ON D.DUTY_ID = P.DUTY_ID
	            JOIN CAREER C ON C.CAREER_ID = P.CAREER_ID
	            JOIN EMP E ON E.EMP_ID = P.EMP_ID
	WHERE POST_IDX IN (
	 SELECT POST_IDX
	        FROM
	(SELECT  PC.POST_IDX AS POST_IDX
	FROM POST_CLICK PC JOIN POST P ON PC.POST_IDX = P.POST_IDX
	WHERE USER_IDX IN (
	    SELECT USER_IDX
	    FROM POST_CLICK
	    WHERE POST_IDX = #{arg1} AND USER_IDX != #{arg0}
	)
	AND PC.POST_IDX != #{arg1} 
	AND P.POST_DDATE >= SYSDATE 
	AND P.DUTY_ID = #{arg2}
	GROUP BY PC.POST_IDX
	ORDER BY COUNT(PC.POST_IDX) DESC, DBMS_RANDOM.VALUE  
	)
	FETCH FIRST 3 ROWS ONLY
	
	)
	   
   </select>
   
   <select id="getPostclick">
   SELECT *
   FROM POST_CLICK
   WHERE POST_IDX = #{arg1} AND USER_IDX = #{arg0} 
   </select>
   
   <insert id="insertPostClick">
   INSERT INTO POST_CLICK (PC_IDX,USER_IDX,POST_IDX) 
   VALUES ( POST_CLICK_SEQ.NEXTVAL,#{arg0},#{arg1})
   </insert>
   
   
   <select id="getClarification">
   SELECT *
   FROM CLARIFICATION
   WHERE POST_IDX = #{post_idx}
   </select>
   
   <select id="getResumeClickList">
   SELECT *
   FROM RESUME_CLICK
   WHERE RESUME_IDX = #{resume_idx}
   </select>
  
   <delete id="deleteResumeClickR">
   DELETE 
   FROM RESUME_CLICK
   WHERE RESUME_IDX = #{resume_idx}
   </delete>
   
   <insert id="inserCarification">
   INSERT INTO CLARIFICATION (CLARIFICATION_IDX,CLOTH,AGE,SITUATION_ETC,PREK,PTO,PREK_ETC,MEETING_NUM,MEETING_COUNT,POST_IDX)
    VALUES ( CLARIFICATION_SEQ.NEXTVAL,#{cloth},#{age},#{situation_etc},#{prek},#{pto},#{prek_etc},#{meeting_num},#{meeting_count},
    (SELECT NVL(MAX(POST_IDX),0) FROM POST)
)
   </insert>
   
   <insert id="insertCarPost">
      INSERT INTO CLARIFICATION (CLARIFICATION_IDX,CLOTH,AGE,SITUATION_ETC,PREK,PTO,PREK_ETC,MEETING_NUM,MEETING_COUNT,POST_IDX)
    VALUES ( CLARIFICATION_SEQ.NEXTVAL,#{arg0},#{arg1},#{arg2},#{arg3},#{arg4},#{arg5},#{arg6},#{arg7},
    #{arg8}
)
   </insert>
   
   <update id="updateClarification">
   UPDATE CLARIFICATION
   SET  CLOTH = #{cloth},
        AGE = #{age},
        SITUATION_ETC = #{situation_etc},
        PREK = #{prek},
        PTO = #{pto},
        PREK_ETC = #{prek_etc},
        MEETING_NUM  = #{meeting_num},
        MEETING_COUNT = #{meeting_count}
   WHERE CLARIFICATION_IDX = #{clarification_idx}
   </update>
   
   <delete id="deleteClarification">
   DELETE 
   FROM CLARIFICATION
   WHERE POST_IDX = #{post_idx}
   </delete>
   
   <delete id="deletePostClick">
   DELETE
   FROM POST_CLICK
   WHERE POST_IDX = #{post_idx}   
   </delete>
   
   <insert id="insertBookU">
   INSERT INTO USER_BOOKMARK (UB_IDX, USER_IDX, COMPANY_IDX)
   VALUES ((SELECT NVL(MAX(UB_IDX), 0) + 1 FROM USER_BOOKMARK), #{arg1}, #{arg0})
   </insert>
   
   
   <delete id="deleteBookU">
   DELETE
   FROM USER_BOOKMARK
   WHERE USER_IDX = #{arg1} AND COMPANY_IDX = #{arg0} 
   </delete>
   
   <select id="getBookU">
   SELECT UB_IDX
   FROM USER_BOOKMARK
   WHERE USER_IDX = #{arg0} AND COMPANY_IDX = #{arg1} 
   </select>
   <select id="getResumeClickListR">
      SELECT U.USER_IDX,
          R.RESUME_IDX,
          R.RESUME_TITLE,
          U.USER_NAME,
          D.DUTY_NAME,
       CASE 
           WHEN RC.CAREER_SDATE IS NULL OR RC.CAREER_EDATE IS NULL THEN '신입'
           ELSE TO_CHAR(FLOOR(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE) / 12)) || '년 ' || 
                        TO_CHAR(MOD(FLOOR(MONTHS_BETWEEN(RC.CAREER_EDATE, RC.CAREER_SDATE)), 12)) || '개월'
       END AS duration
   FROM RESUME R LEFT JOIN RESUME_CAREER RC ON R.RESUME_IDX =RC.RESUME_IDX
                 JOIN USERS U ON R.USER_IDX = U.USER_IDX
                 JOIN DUTY D ON R.DUTY_ID = D.DUTY_ID
   WHERE R.RESUME_IDX IN 
   ( SELECT RESUME_IDX
	        FROM
   ( SELECT RC.RESUME_IDX AS RESUME_IDX
    FROM RESUME_CLICK RC JOIN RESUME R ON RC.RESUME_IDX = R.RESUME_IDX
    WHERE COMPANY_IDX IN (
 	      SELECT COMPANY_IDX
	      FROM RESUME_CLICK
	      WHERE RESUME_IDX = #{arg0} AND COMPANY_IDX != #{arg1}  )
    AND RC.RESUME_IDX ! = #{arg0}
    AND R.DUTY_ID = #{arg2} 
    GROUP BY RC.RESUME_IDX
    ORDER BY COUNT(RC.RESUME_IDX) DESC, DBMS_RANDOM.VALUE 
    )FETCH FIRST 3 ROWS ONLY )
     
   </select>
   
   <select id="getResumeClick">
   SELECT *
   FROM RESUME_CLICK
   WHERE RESUME_IDX = #{arg0} AND COMPANY_IDX = #{arg1}
   </select> 
   
   
   <insert id="insertResumeClick">
  INSERT INTO RESUME_CLICK (RC_IDX,RESUME_IDX,COMPANY_IDX) 
  VALUES (RESUME_CLICK_SEQ.NEXTVAL,#{arg0},#{arg1}) 
   </insert>
   
   <select id="getResumeSkillListLong">
    SELECT SKILL_NAME ,RS.SKILL_ID,RS.RESUME_SKILL_IDX ,RS.RESUME_IDX
    FROM RESUME_SKILL RS JOIN SKILL S ON RS.SKILL_ID = S.SKILL_ID
   </select>
   
  <select id="getCompanyPostIdx">
  SELECT *
  FROM POST
  WHERE COMPANY_IDX = #{company_idx}
  </select>
  
   <select id="getUserResumeIdx">
   SELECT USER_IDX ,RESUME_IDX,	TO_CHAR(RESUME_CDATE,'YYYY.MM') RESUME_CDATE,
	    TO_CHAR(RESUME_FDATE,'YYYY.MM') RESUME_FDATE,RESUME_TITLE
  FROM RESUME
  WHERE USER_IDX = #{user_idx}
   </select>
   
   <select id="getNoticeUser">
   SELECT *
   FROM NOTICE
   WHERE USER_IDX = #{user_idx} AND STATE ='0'
   
   </select>
   
</mapper>

















